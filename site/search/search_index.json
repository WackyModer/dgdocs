{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"This plage is a placeholder","text":""},{"location":"#welcome-to-desktop-goose-modding-documentation","title":"Welcome to Desktop Goose modding documentation","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"First%20steps/","title":"1. Materials required","text":"<p>In this tutorial you will learn to setup and code a basic mod for desktop goose. Remember! This takes time and effort, so not really for the faint of heart.</p>"},{"location":"First%20steps/#what-you-need","title":"What you need","text":""},{"location":"First%20steps/#you-need-to-know-how-to-code-in-c","title":"You need to know how to code in C#","text":"<p>To, y'know, code. If you don't know how to code and you still want to participate in this, you can follow this tutorial here to learn to code in C#, and follow Brackeys C# course, and remember, don't fall into tutorial hell.</p>"},{"location":"First%20steps/#have-the-desktop-goose-program","title":"Have the Desktop Goose program","text":"<p>This will be useful in the tutorial</p>"},{"location":"First%20steps/#a-proper-ide-for-c-i-use-visual-studio-2022-but-a-jetbrains-product-would-work-vsc-will-not-work-at-the-time-of-writing","title":"A proper IDE for C#, I use Visual Studio 2022, but a Jetbrains product would work, VSC will not work (At the time of writing)","text":"<p>This gives you code highlighting, errors before you compile your code, auto complete, and as a cherry on top, you can compile in it.</p>"},{"location":"First%20steps/fproj/","title":"3. Understanding the mod file","text":"<p>So you just open up the mod and I explain it.</p>"},{"location":"First%20steps/fproj/#opening-the-mod-project","title":"Opening the mod project","text":"<ol> <li> <p>Go into the \"FOR MOD-MAKERS\" folder, then navigate into the \"GooseMod_DefaultSolution\" folder.</p> </li> <li> <p>Open \"GooseMod.sln\" in Visual Studio.</p> </li> </ol> <p>You should now been on a screen somewhat like this:</p> <p></p>"},{"location":"First%20steps/fproj/#woah-what-is-all-of-this","title":"Woah! What is all of this?","text":"<p>This screen will look a little daunting at first, but heres what everything is, on your right it has all the files in your project, this is called the solution explorer. On the top, those are settings, debug tools and some misc utilites.</p>"},{"location":"First%20steps/fproj/#wheres-the-code","title":"Where's the code?","text":"<p>So now that you have a basic overview of what everything is, double click \"ModMain.cs\".</p> <p>This is where it gets techinical and I expect you to know stuff btw.</p> <p>So on the function \"PostTick\", its exactly whats on the tin, after all the goose's code has run, it calls that function. Theres also PostRender, PostUpdateRig, and then all of those but with pre instead of post. (They're all just whats on the tin)</p> <p>So thats the basics of whats in there.</p>"},{"location":"First%20steps/instvs/","title":"2. Installing Visual Studio","text":"<p>This will explain how to install Visual Studio, with it you will be able to go much farther than just making mods for Desktop Goose.</p>"},{"location":"First%20steps/instvs/#whats-required","title":"What's required","text":""},{"location":"First%20steps/instvs/#10-11-gigs-of-storage","title":"10-11 gigs of storage","text":"<p>To install Visual Studio and have some projects.</p>"},{"location":"First%20steps/instvs/#have-a-decent-computer-with-at-minimum-8-gigs-of-ram-4-is-acceptable-dont-expect-the-best-preformance","title":"Have a decent computer with at minimum 8 gigs of ram (4 is acceptable, don't expect the best preformance)","text":"<p>This will allow you to run it without it freezing/crashing... too much.</p>"},{"location":"First%20steps/instvs/#installation","title":"Installation","text":"<p>Once you slam through all the \"Next\" buttons on the installer, you will come to a screen that looks like this.</p> <p></p> <p>Once you're in the installer click the \"Avaliable\" tab... button... page... thing</p> <p></p> <p>Once you are there, there will be something that says Visual Studio Community then a year, this tutorial will be on Visual Studio Community 2022, but any other version should work but I cant bee too sure.</p> <p>Once its installed, click the modify button and you'll be brought a list of some selectable squares, select \".Net desktop development\" and \"Universal Windows Platform development\" and click install in the bottom right corner, yes it requires administrator.</p>"},{"location":"First%20steps/usage/","title":"2. Page 2","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"First%20steps/usage/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"First%20steps/usage/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"First%20steps/usage/#contents","title":"Contents","text":"<p>.. toctree::</p> <p>usage    api</p>"},{"location":"First%20steps/xfa/","title":"Actually coding on your project","text":"<p>So now that you're in your \"Modmain.cs\" file, lets actually code something.</p>"},{"location":"First%20steps/xfa/#making-the-goose-follow-the-mouse-constantly","title":"Making the goose follow the mouse constantly","text":"<p>So, your on your project, which will look like this. </p> <p></p> <p>Remove the code that says</p> <pre><code>if (g.currentTask == API.TaskDatabase.getTaskIndexByID(\"FollowMouseDrifty\"))\n{\n    // Lock our goose facing one direction for some reason?\n    g.direction = 0;\n}\n</code></pre> <p>and remove all the comments.</p> <p>Making the goose follow the mouse is actually a simple task, and it can be done with only a single line of code! </p> <p>Add the line</p> <pre><code>g.targetPos = new Vector2(Input.mouseX, Input.mouseY);\n</code></pre> <p>Then add this line of code to the start of the file, to use mouse inputs.</p> <pre><code>using System.IO;\n</code></pre> <p> In the \"PostTick()\" function, the letter g, is how we interact with the goose entity, targetPos is a variable in the goose entity, and we are supplying it with a vector2, of the mouse x cord, and the mouse y cord.</p> <p>So to compile this code, (as shown on the right) you right click DefaultMod in the solution explorer, and select the first item in the dropdown, which is \"build\". Once you do that, go to file explorer, and navigate into the folders \"DefaultMod/bin/Release\" and copy \"DefaultMod.dll\" into (from main desktop goose dir) \"Assets/Mods\" and create a folder with the same name as your dll, but without the .dll bit, so DefaultMod, and copy your DefaultMod.dll into that folder, and start desktop goose (with mods enabled).</p> <p>Look in the QOL folder here for some better and more effective ways to do this.</p>"},{"location":"QOL/compmod/","title":"How to have easier debugging","text":"<p>What this does is it changes the DIR your mod compiles to, then runs the desktop goose executable for easy debugging and testing!</p>"},{"location":"QOL/compmod/#how-to-do-it","title":"How to do it","text":"<p>Open your mod SLN file. Then navigate to the solution explorer. Right click the \"DefaultMod\" project file thing and select \"properties\" from the dropdown.</p> <p>Navigate to \"Debug\" on the right side of the screen and in the \"Start Action\" section of the screen that you see, select \"Start external program\", then select browse. From the window that it opens up, navigate to the desktop goose executable, select that, then click open on the bottom right then save the modifications to the debug options.</p> <p>After that you must navigate to the \"Build\" tab on the left side of the screen. Then at the bottom it theres a section that says \"Output\". On the item that says \"Output Path\", select browse, and navigate to your \"DefaultMod\" folder in \"Assets/Mods\" then save your debug</p> <p>Once you do that you can navigate to the \"Solution explorer\", right click \"DefaultMod\", then hover over debug and select start \"New instance\", or \"Start without debugging\", it doesn't matter. </p> <p>That's it! Now you can compile your code and have it exported to your mod folder, and have it start running on desktop goose!</p>"}]}